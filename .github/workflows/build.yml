name: "Build Kernel"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          jq . ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel for ${{ matrix.repos.kernelSource.device }}"
    runs-on: ubuntu-22.04
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: "${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}"
      kernelName: "${{ matrix.repos.kernelSource.name }}"
      kernelRepo: "${{ matrix.repos.kernelSource.repo }}"
      kernelBranch: "${{ matrix.repos.kernelSource.branch }}"
      DEFCONFIG_PATH: "${{ matrix.repos.kernelSource.defconfig }}"
      withKernelSU: "${{ matrix.repos.withKernelSU }}"

    steps:
      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip libssl-dev flex bison lld

      - name: "üåü Clone kernel source"
        run: |
          mkdir -p ${{ env.kernelDir }}
          git clone --depth=1 --branch ${{ env.kernelBranch }} ${{ env.kernelRepo }} ${{ env.kernelDir }}/${{ env.kernelName }}
          
      - name: "üòé Set build environment and arguments"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        run: |
          echo "Verifying system toolchain..."
          clang --version
          
          args="-j$(nproc --all) O=$(pwd)/${{ env.OUT_DIR }}"
          
          while read -r entry; do
            key=$(echo "$entry" | cut -d= -f1)
            value=$(echo "$entry" | cut -d= -f2)
            args="$args $key=$value"
          done < <(echo $params | jq -r 'to_entries[] | "\(.key)=\(.value)"')

          echo "Build arguments: $args"
          echo "args=$args" >> $GITHUB_OUTPUT
          echo "ARCH=$(echo $params | jq -r ".ARCH")" >> $GITHUB_ENV

      - name: "üòã Integrate KernelSU"
        if: env.withKernelSU == 'true'
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo "Integrating KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
          echo "Adding KernelSU kprobe configs to defconfig..."
          echo -e "\nCONFIG_KPROBES=y\nCONFIG_HAVE_KPROBES=y\nCONFIG_KPROBE_EVENTS=y" >> ${{ env.DEFCONFIG_PATH }}

      - name: "üëç Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${{ env.args }} mrproper
          cp ${{ env.DEFCONFIG_PATH }} ../${{ env.OUT_DIR }}/.config
          make ${{ env.args }} olddefconfig
          sed -i 's/CONFIG_NR_CPUS=.*/CONFIG_NR_CPUS=8/g' ../${{ env.OUT_DIR }}/.config
          echo "Starting kernel compilation..."
          make ${{ env.args }}

      - name: "üì¶ Pack with AnyKernel3"
        working-directory: ./${{ env.kernelDir }}
        run: |
          echo "Packaging with AnyKernel3..."
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3
          
          if [[ -f "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz" ]]; then
            cp "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz" AnyKernel3/
          elif [[ -f "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image" ]]; then
            cp "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image" AnyKernel3/
          else
            echo "Kernel Image not found!"
            exit 1
          fi
          
          if [[ -f "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img" ]]; then
            cp "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img" AnyKernel3/
          fi
          
          if [[ -f "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb" ]]; then
            cp "${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb" AnyKernel3/
          fi
          
          cd AnyKernel3
          zip -r9 "../${{ env.kernelName }}-${{ matrix.repos.kernelSource.device }}-$(date +'%Y-%m-%d').zip" .
          
      - name: "üì§ Upload Flashable ZIP"
        uses: actions/upload-artifact@v4
        with:
          name: "Flashable-Kernel-${{ matrix.repos.kernelSource.device }}"
          path: ./${{ env.kernelDir }}/*.zip
          if-no-files-found: error
