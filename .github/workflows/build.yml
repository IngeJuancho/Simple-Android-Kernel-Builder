name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.device }}_defconfig
      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "Create working directory"
        run: mkdir -p ${{ env.kernelDir }}

      - name: "Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools

      - name: "Clone kernel source"
        working-directory: ./${{ env.kernelDir }}
        run: |
          echo "Cloning kernel from: ${{ env.kernelRepo }}"
          echo "Branch: ${{ env.kernelBranch }}"
          git clone --recursive --branch ${{ env.kernelBranch }} ${{ env.kernelRepo }} ${{ env.kernelName }} --depth=1
          cd ${{ env.kernelName }}
          echo "Kernel commit:"
          git log --oneline -1

      - name: "Download and configure toolchains"
        working-directory: ./${{ env.kernelDir }}
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          echo "Downloading $toolchains_num toolchains..."
          for ((i=0;i<toolchains_num;i++)); do
            name=$(echo $toolchains | jq -r ".[$i].name")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            branch=$(echo $toolchains | jq -r ".[$i].branch")
            echo "  - $name from $repo (branch: $branch)"
            git clone --recursive --branch $branch $repo $name --depth=1
            echo "$(pwd)/$name/" >> $GITHUB_PATH
            echo "$(pwd)/$name/bin" >> $GITHUB_PATH
          done
          echo "Toolchains configured in PATH"

      - name: "Generate build arguments"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CROSS_COMPILE_COMPAT=$(echo $params | jq -r ".CROSS_COMPILE_COMPAT")
          CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          AR=$(echo $params | jq -r ".AR")
          CC=$(echo $params | jq -r ".CC")

          echo "ARCH=$ARCH" >> $GITHUB_ENV

          args="-j$(nproc --all)"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p $(pwd)/${{ env.OUT_DIR }}
            args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          fi
          if [ -n "$ARCH" ]; then
            args="$args ARCH=$ARCH"
          fi
          if [ -n "$CROSS_COMPILE" ]; then
            args="$args CROSS_COMPILE=$CROSS_COMPILE"
          fi
          if [ -n "$CLANG_TRIPLE" ]; then
            args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          fi
          if [ -n "$CROSS_COMPILE_COMPAT" ]; then
            args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_COMPAT"
          fi
          if [ -n "$AR" ]; then
            args="$args AR=$AR"
          fi
          if [ -n "$CC" ]; then
            args="$args CC=$CC"
          fi
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "Clean kernel source"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Cleaning kernel source..."
          make ${{ env.args }} clean 2>/dev/null || true
          make ${{ env.args }} mrproper 2>/dev/null || true

      - name: "Apply safe defconfig patches"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo "Applying defconfig patches..."
          DEFCONFIG_PATH="arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}"
          
          if [ ! -f "$DEFCONFIG_PATH" ]; then
            echo "ERROR: defconfig not found at $DEFCONFIG_PATH"
            exit 1
          fi
          
          # Agregar configuraciones de forma segura
          grep -q "CONFIG_NR_CPUS=8" "$DEFCONFIG_PATH" || echo "CONFIG_NR_CPUS=8" >> "$DEFCONFIG_PATH"
          grep -q "CONFIG_NO_HZ_FULL=y" "$DEFCONFIG_PATH" || echo "CONFIG_NO_HZ_FULL=y" >> "$DEFCONFIG_PATH"
          
          # Reemplazar de forma segura
          sed -i 's/^CONFIG_SCHED_DEBUG=y/# CONFIG_SCHED_DEBUG is not set/' "$DEFCONFIG_PATH"
          
          echo "Defconfig patches applied successfully."

      - name: "Install KernelSU"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          echo "Installing KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          
          echo "Adding KernelSU kprobe configs..."
          DEFCONFIG_PATH="arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}"
          grep -q "CONFIG_KPROBES=y" "$DEFCONFIG_PATH" || echo "CONFIG_KPROBES=y" >> "$DEFCONFIG_PATH"
          grep -q "CONFIG_HAVE_KPROBES=y" "$DEFCONFIG_PATH" || echo "CONFIG_HAVE_KPROBES=y" >> "$DEFCONFIG_PATH"
          grep -q "CONFIG_KPROBE_EVENTS=y" "$DEFCONFIG_PATH" || echo "CONFIG_KPROBE_EVENTS=y" >> "$DEFCONFIG_PATH"

      - name: "Generate defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Generating defconfig from ${{ env.DEFCONFIG_NAME }}..."
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Starting kernel compilation..."
          make ${{ env.args }}
          
          if [ $? -ne 0 ]; then
            echo "Build failed! Check logs above for errors."
            exit 1
          fi

      - name: "Verify build artifacts"
        working-directory: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot
        run: |
          echo "Verifying build artifacts..."
          if [ -f "Image" ]; then
            echo "SUCCESS: Image found"
            ls -lh Image
          else
            echo "ERROR: Image not found!"
            exit 1
          fi
          
          # Verificar opcionales
          if [ -f "Image.gz" ]; then
            echo "INFO: Image.gz found"
          fi
          if [ -f "dtb" ]; then
            echo "INFO: dtb found"
          fi
          if [ -f "dtbo.img" ]; then
            echo "INFO: dtbo.img found"
          fi

      - name: "Upload Image"
        uses: actions/upload-artifact@v4
        with:
          name: Image_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: error
          retention-days: 7

      - name: "Upload Image.gz"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Image.gz_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "Upload dtb"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dtb_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "Upload dtbo.img"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dtbo.img_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7
