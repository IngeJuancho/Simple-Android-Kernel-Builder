name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v3

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.kernelSource.device }}_defconfig
      withKernelSU: ${{ matrix.repos.withKernelSU }}
    steps:
      - name: "‚ú® Create working directory"
        run: mkdir -p $kernelDir

      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools libncurses-dev flex bison lld

      - name: "üåü Clone kernel source"
        working-directory: ./${{ env.kernelDir }}
        run: |
          echo "Cloning kernel from: $kernelRepo"
          echo "Branch: $kernelBranch"
          git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1
          cd $kernelName
          echo "Kernel commit:"
          git log --oneline -1

      - name: "üí´ Download Proton Clang"
        working-directory: ./${{ env.kernelDir }}
        run: |
          echo "Downloading Proton Clang..."
          git clone --depth=1 https://github.com/kdrag0n/proton-clang clang
          export CLANG_PATH=$(pwd)/clang/bin
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "PATH=$CLANG_PATH:$PATH" >> $GITHUB_ENV

      - name: "üîß Verify LLVM Tools"
        working-directory: ./${{ env.kernelDir }}
        run: |
          echo "=== Verificaci√≥n completa de herramientas ==="
          export CLANG_PATH=$(pwd)/clang/bin
          export PATH=$CLANG_PATH:$PATH
          
          echo "Clang: $(which clang)"
          clang --version | head -1
          
          echo "LD: $(which ld.lld)" 
          ld.lld --version 2>/dev/null | head -1 || echo "‚ö†Ô∏è  ld.lld no funciona"
          
          echo "AR: $(which llvm-ar)"
          llvm-ar --version | head -1
          echo "NM: $(which llvm-nm)"
          echo "OBJCOPY: $(which llvm-objcopy)"
          echo "OBJDUMP: $(which llvm-objdump)"
          echo "STRIP: $(which llvm-strip)"

      - name: "üòé Generate build arguments"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CC=$(echo $params | jq -r ".CC")
          LD=$(echo $params | jq -r ".LD")
          AR=$(echo $params | jq -r ".AR")
          NM=$(echo $params | jq -r ".NM")
          OBJCOPY=$(echo $params | jq -r ".OBJCOPY")
          OBJDUMP=$(echo $params | jq -r ".OBJDUMP")
          STRIP=$(echo $params | jq -r ".STRIP")
          LLVM=$(echo $params | jq -r ".LLVM")

          echo "ARCH=$ARCH" >> $GITHUB_ENV

          NUM_THREADS=$(nproc --all)
          args="-j${NUM_THREADS}"
          
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p $(pwd)/${{ env.OUT_DIR }}
            args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          fi
          
          # Par√°metros esenciales para Clang/LLVM
          args="$args ARCH=$ARCH"
          args="$args CC=$CC"
          args="$args LLVM=$LLVM"
          
          # Herramientas LLVM
          if [ -n "$LD" ]; then
            args="$args LD=$LD"
          fi
          if [ -n "$AR" ]; then
            args="$args AR=$AR"
          fi
          if [ -n "$NM" ]; then
            args="$args NM=$NM"
          fi
          if [ -n "$OBJCOPY" ]; then
            args="$args OBJCOPY=$OBJCOPY"
          fi
          if [ -n "$OBJDUMP" ]; then
            args="$args OBJDUMP=$OBJDUMP"
          fi
          if [ -n "$STRIP" ]; then
            args="$args STRIP=$STRIP"
          fi
          
          echo "Build arguments: $args"
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üîß Clean kernel source"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Cleaning kernel source..."
          make ${{ env.args }} clean 2>/dev/null || true
          make ${{ env.args }} mrproper 2>/dev/null || true

      - name: "üîß Apply Minimal Patches"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo "Applying only essential patches..."
          
          # Solo parches cr√≠ticos
          if [ -f "drivers/media/rc/msm-geni-ir.c" ]; then
            sed -i '1i#include <linux/irq.h>' drivers/media/rc/msm-geni-ir.c || true
            echo "Applied header patch for msm-geni-ir.c"
          fi
          
          # Configuraciones adicionales seguras
          echo "CONFIG_NR_CPUS=8" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_NO_HZ_FULL=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          sed -i 's/CONFIG_SCHED_DEBUG=y/# CONFIG_SCHED_DEBUG is not set/g' arch/arm64/configs/${{ env.DEFCONFIG_NAME }} || true
          echo "Applied configuration patches"

      - name: "üòã Update KernelSU"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ env.withKernelSU == 'true' }}
        run: |
          echo "Installing KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
          echo "Adding KernelSU kprobe configs..."
          echo -e "\nCONFIG_KPROBES=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "\nCONFIG_HAVE_KPROBES=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo -e "\nCONFIG_KPROBE_EVENTS=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "KernelSU setup completed"

      - name: "üëç Generate defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Generating defconfig from ${{ env.DEFCONFIG_NAME }}..."
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}
          echo "Defconfig generated successfully"

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "Starting kernel compilation..."
          echo "Using toolchain:"
          which clang
          clang --version
          which ld.lld
          ld.lld --version || echo "ld.lld version check failed"
          make ${{ env.args }}
          echo "Kernel compilation completed"

      - name: "‚úÖ Verify build artifacts"
        working-directory: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot
        run: |
          echo "Verifying build artifacts..."
          ls -la
          find . -name "Image*" -o -name "dtb*" -o -name "dtbo*" | head -10
          echo "Artifact verification completed"

      - name: "üíõ Upload Image"
        uses: actions/upload-artifact@v4
        with:
          name: Image_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: error
          retention-days: 7

      - name: "üíô Upload Image.gz"
        uses: actions/upload-artifact@v4
        with:
          name: Image.gz_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz
          if-no-files-found: ignore
          retention-days: 7

      - name: "üíú Upload dtb"
        uses: actions/upload-artifact@v4
        with:
          name: dtb_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "‚ù§Ô∏è Upload dtbo.img"
        uses: actions/upload-artifact@v4
        with:
          name: dtbo.img_${{ env.kernelDevice }}_${{ env.kernelName }}_${{ env.kernelBranch }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/dtbo.img
          if-no-files-found: ignore
          retention-days: 7
